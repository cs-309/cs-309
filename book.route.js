const User = require("../models/user");
const Book = require("../models/book");

const { Token_Admin } = require("./verifyToken");

const express = require("express");
const asyncHandler = require("express-async-handler");
const bcrypt = require("bcryptjs");
const { check, validationResult } = require("express-validator");
const jwt = require("jsonwebtoken");
const JWT_SECRET_KEY = process.env.JWT_SECRET_KEY;

const bookRouter = express.Router();

//const bookRouter = express.Router();
// bookRouter.post(
//   "/",
//   asyncHandler(async (req, res) => {
//     const token = req.headers["x-token"];
//     const user = await jwt.verify(token, JWT_SECRET_KEY);

//     if (user.role !== "admin") {
//       return res
//         .status(401)
//         .json({ message: "Unauthorized: alloew only for admins" });
//     }

//     const { name } = req.body;

//     return res.json(name);
//   })
// );

//add book
bookRouter.post("/add", Token_Admin, async (req, res) => {
  const newbook = new Book(req.body);

  try {
    const savebook = await newbook.save();
    res.status(200).json(savebook);
  } catch (err) {
    res.status(401).json(err);
  }
});

//get book by id, id is primary key generated by default in db
bookRouter.get("/find/:id", async (req, res) => {
  try {
    const book = await book.findById(req.params.id);
    res.status(200).json(book);
  } catch (err) {
    res.status(401).json(err);//bad request
  }
});

//get all books
bookRouter.get('/', (req, res) => {
  //what is limit?
  const { limit = 10 } = req.query;

  getAllBooks(limit)
    .then(books => {
      console.log(`books`, books);
      return res.status(200).json(books);
    })
    .catch(err => {
      console.log(`err`, err);
      return res.status(404).json({ error: "No books found"});
    });
});

const getAllBooks = async (n) => {
  return await (Book.find().limit(n));
}

//delete book
bookRouter.delete("/id",  Token_Admin  , async (req, res) => {
  const bookid = req.params.id;
try {
      await Book.findByIdAndDelete(bookid);
      res.json({ message: 'Book removed' });
  } catch (err) {
      res.status(401).json({ message: err.message });
  }
});

//update book
bookRouter.put("/:id", Token_Admin,async (req, res) => {
   
  const bookid = req.params.id;
  const { title, author, description, price, rating } = req.body;

  try {
      const updatebook = await Book.findByIdAndUpdate(
          bookid, {
          title,
          author,
          description,
          price,
          rating
      }, { new: true });

      res.json(updatebook);
  } catch (err) {
      res.status(401).json({ message: "can't update" });
  }
});





module.exports = bookRouter;
